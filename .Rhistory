summary(model1)
# Now we fit the model to our dataset to predict the prices for every house
train3_fit <- fitted(model1)
train3$pred <- train3_fit
# We create a function for the mean absoulte percentage error
mape <- function(real, predicted) {
return(mean(abs((real - predicted) / real)))
}
# We score the MAPE on our actual and predicted values
mape(train3$price, train3$pred)
test4 <- test3
source('~/Desktop/TERM 3/house_prices/1. Preparation.R', echo=TRUE)
source('~/Desktop/TERM 3/house_prices/2. Correlation.R', echo=TRUE)
source('~/Desktop/TERM 3/house_prices/3. Graphs.R', echo=TRUE)
source('~/Desktop/TERM 3/house_prices/4. Data transformation.R', echo=TRUE)
source('~/Desktop/TERM 3/house_prices/5. Model.R', echo=TRUE)
source('~/Desktop/TERM 3/house_prices/1. Preparation.R', echo=TRUE)
source('~/Desktop/TERM 3/house_prices/1. Preparation.R', echo=TRUE)
source('~/Desktop/TERM 3/house_prices/2. Correlation.R', echo=TRUE)
source('~/Desktop/TERM 3/house_prices/3. Graphs.R', echo=TRUE)
source('~/Desktop/TERM 3/house_prices/4. Data transformation.R', echo=TRUE)
source('~/Desktop/TERM 3/house_prices/5. Model.R', echo=TRUE)
# Linear Regression to predict price based on the folloeing variables
model1 <- train(formula,
data = train4,
method = "lm",
trControl = fitControl,
metric = "MAE") # what is this
# The model scores an R2 of 0.84
summary(model1)
# Now we fit the model to our dataset to predict the prices for every house
train4_fit <- fitted(model1)
train4$pred <- train4_fit
# We create a function for the mean absoulte percentage error
mape <- function(real, predicted) {
return(mean(abs((real - predicted) / real)))
}
# We score the MAPE on our actual and predicted values
mape(train4$price, train4$pred)
# We predict the prices on the test dataset
test4$price <- predict(model1, test4)
View(test4)
test4 <- test3
View(test4)
# We predict the prices on the test dataset
test4$price <- predict(model1, test4)
View(test4)
# To complete our analysis, we run the moden on a dataset with the selected variables
train4 <- train3[, c("bedrooms", "bathrooms", "sqft_living", "floors", "waterfront", "view",
"grade", "sqft_above", "sqft_living15", "lat", "condition",
"yr_renovated", "zipcode", "price")]
test4 <- test3
# Settings for the model
formula = price ~ .
fitControl <- trainControl(method="cv",number = 5)
# Linear Regression to predict price based on the folloeing variables
model1 <- train(formula,
data = train4,
method = "lm",
trControl = fitControl,
metric = "MAE") # what is this
# The model scores an R2 of 0.84
summary(model1)
# Now we fit the model to our dataset to predict the prices for every house
train4_fit <- fitted(model1)
train4$pred <- train4_fit
View(train4)
# We create a function for the mean absoulte percentage error
mape <- function(real, predicted) {
return(mean(abs((real - predicted) / real)))
}
# We score the MAPE on our actual and predicted values
mape(train4$price, train4$pred)
View(test4)
# We predict the prices on the test dataset
test4$price <- predict(model1, test4)
View(test4)
source('~/Desktop/TERM 3/house_prices/5. Model.R', echo=TRUE)
mape(train4$price, train4$pred)
round(mape(train4$price, train4$pred), 2)
train <- read.csv("https://gist.githubusercontent.com/alombatti/f2cb8f1a244784999353309a97a6777f/raw/f38ee90641da97f62964ac10ea558564bfc6cb65/house_price_train.csv")
test <- read.csv("https://gist.githubusercontent.com/alombatti/1df87e336f159842e64ced9380b13e25/raw/49ea0fe6b42fb5d4868e1291dc8e47b20d2cc3bd/house_price_test.csv")
complete <- Stack(train, test)
complete$id = NULL
complete$date = NULL
***
complete2 <- select(complete, "price", "bedrooms", "bathrooms", "sqft_living", "floors",
"waterfront", "view", "grade", "sqft_above", "sqft_basement", "lat",
"sqft_living15", "condition", "yr_renovated", "zipcode")
***
train2 <- split(complete2, complete2$price > 0)
train2 <- train2[["TRUE"]]
test2 <- split(complete2, is.na(complete2$price))
test2 <- test2[["TRUE"]]
train2 <- train2[-5419, ] # Eliminate bathrooms = 7.5
train2 <- train2[train2$bedrooms <= 10, ] # Keeping bedrooms <10
train2$sqft_basement[train2$sqft_basement != 0] = 1 # Dummify basement
test2$sqft_basement[test2$sqft_basement != 0] = 1
train2$yr_renovated[train2$yr_renovated != 0] = 1 #Dummify yr_renovated
test2$yr_renovated[test2$yr_renovated != 0] = 1
complete2 <- Stack(train2, test2)
***
complete3 <- complete2
range01 <- function(x) {
(x-min(x)) / (max(x)-min(x))
}
complete3$sqft_living <- range01(complete3$sqft_living)
complete3$sqft_above <- range01(complete3$sqft_above)
complete3$sqft_living15 <- range01(complete3$sqft_living15)
complete3$bathrooms <- range01(complete2$bathrooms)
complete3$floors <- range01(complete2$floors)
complete3$grade <- range01(complete2$grade)
complete3$condition <- range01(complete3$condition)
complete3$bedrooms <- range01(complete3$bedrooms)
complete3$waterfront <- as.factor(complete2$waterfront)
complete3$view <- as.factor(complete2$view)
complete3$sqft_basement <- as.factor(complete3$sqft_basement)
complete3$yr_renovated <- as.factor(complete3$yr_renovated)
complete3$zipcode <- as.factor(complete3$zipcode)
breaks_lat <- c(-Inf, 47.20, 47.25, 47.30, 47.35, 47.40, 47.45, 47.50, 47.55, 47.60,
47.65, 47.70, 47.75, Inf)
names_lat <- c("47.15 - 47.20", "47.20 - 47.25", "47.25 - 47.30", "47.30 - 47.35",
"47.35 - 47.40", "47.40 - 47.45", "47.45 - 47.50", "47.50 - 47.55",
"47.55 - 47.60", "47.60 - 47.65", "47.65 - 47.70", "47.70 - 47.75",
"47.75 - 47.80")
complete3$lat <- cut(complete3$lat, breaks = breaks_lat, labels = names_lat)
train3 <- split(complete3, complete3$price > 0)
train3 <- train3[["TRUE"]]
test3 <- split(complete3, is.na(complete3$price))
test3 <- test3[["TRUE"]]
***
train4 <- train3[, c("bedrooms", "bathrooms", "sqft_living", "floors", "waterfront", "view",
"grade", "sqft_above", "sqft_living15", "lat", "condition",
"yr_renovated", "zipcode", "price")]
test4 <- test3
formula = price ~ .
fitControl <- trainControl(method="cv",number = 5)
model1 <- train(formula,
data = train4,
method = "lm",
trControl = fitControl,
metric = "MAE")
summary(model1)
train4_fit <- fitted(model1)
train4$pred <- train4_fit
mape <- function(real, predicted) {
return(mean(abs((real - predicted) / real)))
}
mape(train4$price, train4$pred)
source('~/Desktop/TERM 3/house_prices/1. Preparation.R', echo=TRUE)
source('~/Desktop/TERM 3/house_prices/2. Correlation.R', echo=TRUE)
source('~/Desktop/TERM 3/house_prices/3. Graphs.R', echo=TRUE)
source('~/Desktop/TERM 3/house_prices/4. Data transformation.R', echo=TRUE)
source('~/Desktop/TERM 3/house_prices/5. Model.R', echo=TRUE)
# Read the data
train <- read.csv("https://gist.githubusercontent.com/alombatti/f2cb8f1a244784999353309a97a6777f/raw/f38ee90641da97f62964ac10ea558564bfc6cb65/house_price_train.csv")
test <- read.csv("https://gist.githubusercontent.com/alombatti/1df87e336f159842e64ced9380b13e25/raw/49ea0fe6b42fb5d4868e1291dc8e47b20d2cc3bd/house_price_test.csv")
source('~/Desktop/TERM 3/house_prices/1. Preparation.R', echo=TRUE)
source('~/Desktop/TERM 3/house_prices/2. Correlation.R', echo=TRUE)
source('~/Desktop/TERM 3/house_prices/3. Graphs.R', echo=TRUE)
source('~/Desktop/TERM 3/house_prices/4. Data transformation.R', echo=TRUE)
source('~/Desktop/TERM 3/house_prices/5. Model.R', echo=TRUE)
tuneGrid=data.table(expand.grid(mtry=c(5,15),
splitrule='variance',
min.node.size=c(2,5,10)))
ctrl <- trainControl(
method = "cv",
number = 10,
savePredictions=TRUE)
model2 <- train(formula,
data = train5,
method = "ranger",
num.trees=1000,
preProc = NULL,
tuneGrid = tuneGrid,
trControl = ctrl,
metric = "MAE")
train5 <- train3[, c("bedrooms", "bathrooms", "sqft_living", "floors", "waterfront", "view",
"grade", "sqft_above", "sqft_living15", "lat", "condition",
"yr_renovated", "zipcode", "price")]
test5 <- test3
model2 <- train(formula,
data = train5,
method = "ranger",
num.trees=1000,
preProc = NULL,
tuneGrid = tuneGrid,
trControl = ctrl,
metric = "MAE")
tuneGrid=data.table(expand.grid(mtry=c(5,15),
splitrule='variance',
min.node.size=c(2,5,10)))
library(data.table)
tuneGrid=data.table(expand.grid(mtry=c(5,15),
splitrule='variance',
min.node.size=c(2,5,10)))
model2 <- train(formula,
data = train5,
method = "ranger",
num.trees=1000,
preProc = NULL,
tuneGrid = tuneGrid,
trControl = ctrl,
metric = "MAE")
model2 <- train(formula,
data = train5,
method = "ranger",
num.trees=10,
preProc = NULL,
tuneGrid = tuneGrid,
trControl = ctrl,
metric = "MAE")
model2
model2 <- train(formula,
data = train5,
method = "ranger",
num.trees=10,
preProc = NULL,
tuneGrid = tuneGrid,
trControl = ctrl,
metric = "MAPE")
model2
library(randomForest)
random_forest <- randomForest(formula = formula
data = train4)
random_forest <- randomForest(formula,
data = train4)
random_forest <- randomForest(formula,
data = train4[-c("zipcode"),])
random_forest <- randomForest(formula,
data = train4[, -c("zipcode")])
train6 <- train3[, c("bedrooms", "bathrooms", "sqft_living", "floors", "waterfront", "view",
"grade", "sqft_above", "sqft_living15", "lat", "condition",
"yr_renovated", "price")]
test6 <- test3
random_forest <- randomForest(formula,
data = train6)
str(train3)
# Transforming remaining varibles into factor for LR
complete3$bedrooms <- as.factor(complete2%bedrooms)
# Transforming remaining varibles into factor for LR
complete3$bedrooms <- as.factor(complete2$bedrooms)
# Unstack train and test
train3 <- split(complete3, complete3$price > 0)
train3 <- train3[["TRUE"]]
test3 <- split(complete3, is.na(complete3$price))
test3 <- test3[["TRUE"]]
random_forest
library(Metrics)
install.packages("Metrics")
library(Metrics)
train5_fit <- fitted(random_forest)
train5$pred <- train5_fit
mape(train5$price, train5$pred)
View(train5)
train5_fit <- fitted(random_forest)
train5$pred <- train5_fit
mape(train5$price, train5$pred)
View(train5)
train5_fit <- fitted(random_forest)
train5_fit <- fitted(random_forest)
?fitted
summary(random_forest)
result <- train5[ ,(ncol(train6)+1)]
head(result)
result
rm(result)
# We predict the prices on the test dataset
test$price <- predict(model1, test)
source('~/Desktop/TERM 3/house_prices/1. Preparation.R', echo=TRUE)
source('~/Desktop/TERM 3/house_prices/2. Correlation.R', echo=TRUE)
source('~/Desktop/TERM 3/house_prices/3. Graphs.R', echo=TRUE)
source('~/Desktop/TERM 3/house_prices/4. Data transformation.R', echo=TRUE)
source('~/Desktop/TERM 3/house_prices/5. Model.R', echo=TRUE)
test4 <- test3
train5 <- train3[, c("bedrooms", "bathrooms", "sqft_living", "floors", "waterfront", "view",
"grade", "sqft_above", "sqft_living15", "lat", "condition",
"yr_renovated", "price")]
test5 <- test3
random_forest <- randomForest(formula,
data = train6)
library(randomForest)
random_forest <- randomForest(formula,
data = train6)
random_forest <- randomForest(formula,
data = train5)
summary(random_forest)
random_forest
train5_fit <- fitted(random_forest)
train5$pred <- train5_fit
mape(train5$price, train5$pred)
library(ggplot2)
library(corrplot)
library(Stack)
library(fastDummies)
library(dplyr)
library(leaflet)
library(caret)
library(randomForest)
# Read the data
train <- read.csv("https://gist.githubusercontent.com/alombatti/f2cb8f1a244784999353309a97a6777f/raw/f38ee90641da97f62964ac10ea558564bfc6cb65/house_price_train.csv")
test <- read.csv("https://gist.githubusercontent.com/alombatti/1df87e336f159842e64ced9380b13e25/raw/49ea0fe6b42fb5d4868e1291dc8e47b20d2cc3bd/house_price_test.csv")
# Stacking the two datasets together
complete <- Stack(train, test)
# Remove ID column
complete$id = NULL
# Remove date column
complete$date = NULL
# Keeping only interesting columns with corr > 0.15
complete2 <- select(complete, "price", "bedrooms", "bathrooms", "sqft_living", "floors",
"waterfront", "view", "grade", "sqft_above", "sqft_basement", "lat",
"sqft_living15", "condition", "yr_renovated", "zipcode")
# Unstack train and test
train2 <- split(complete2, complete2$price > 0)
train2 <- train2[["TRUE"]]
test2 <- split(complete2, is.na(complete2$price))
test2 <- test2[["TRUE"]]
# Last, we apply the changes to the dataset
train2 <- train2[-5419, ] # Eliminate bathrooms = 7.5
train2 <- train2[train2$bedrooms <= 10, ] # Keeping bedrooms <10
train2$sqft_basement[train2$sqft_basement != 0] = 1 # Dummify basement
test2$sqft_basement[test2$sqft_basement != 0] = 1
train2$yr_renovated[train2$yr_renovated != 0] = 1 #Dummify yr_renovated
test2$yr_renovated[test2$yr_renovated != 0] = 1
# And we stack back together train and test
train2$logprice <- NULL
complete2 <- Stack(train2, test2)
# Creating a copy of my dataframe
complete3 <- complete2
# Function for normalization between 0 and 1
range01 <- function(x) {
(x-min(x)) / (max(x)-min(x))
}
# Standardization of sqft_living
complete3$sqft_living <- range01(complete3$sqft_living)
p
# Standardization of sqft_living15
complete3$sqft_living15 <- scale(complete3$sqft_living15)
# Standardization of sqft_above
complete3$sqft_above <- scale(complete3$sqft_above)
# Binning lat
breaks_lat <- c(-Inf, 47.20, 47.25, 47.30, 47.35, 47.40, 47.45, 47.50, 47.55, 47.60,
47.65, 47.70, 47.75, Inf)
names_lat <- c("47.15 - 47.20", "47.20 - 47.25", "47.25 - 47.30", "47.30 - 47.35",
"47.35 - 47.40", "47.40 - 47.45", "47.45 - 47.50", "47.50 - 47.55",
"47.55 - 47.60", "47.60 - 47.65", "47.65 - 47.70", "47.70 - 47.75",
"47.75 - 47.80")
complete3$lat <- cut(complete3$lat, breaks = breaks_lat, labels = names_lat)
# Transforming remaining varibles into factor for LR
complete3$bedrooms <- as.factor(complete2$bedrooms)
complete3$bathrooms <- as.factor(complete2$bathrooms)
complete3$floors <- as.factor(complete2$floors)
complete3$waterfront <- as.factor(complete2$waterfront)
complete3$view <- as.factor(complete2$view)
complete3$grade <- as.factor(complete2$grade)
complete3$sqft_basement <- as.factor(complete3$sqft_basement)
complete3$yr_renovated <- as.factor(complete3$yr_renovated)
complete3$condition <- as.factor(complete3$condition)
complete3$zipcode <- as.factor(complete3$zipcode)
str(complete3)
complete3$bedrooms <- as.factor(complete3$bedrooms)
complete3$bathrooms <- as.factor(complete3$bathrooms)
complete3$floors <- as.factor(complete3$floors)
complete3$waterfront <- as.factor(complete3$waterfront)
complete3$view <- as.factor(complete3$view)
complete3$grade <- as.factor(complete3$grade)
str(complete3)
# Unstack train and test
train3 <- split(complete3, complete3$price > 0)
train3 <- train3[["TRUE"]]
test3 <- split(complete3, is.na(complete3$price))
test3 <- test3[["TRUE"]]
# Transform into log prices
train3$price <- log(train3$price)
test3$price <- log(test3$price)
# To complete our analysis, we run the moden on a dataset with the selected variables
train4 <- train3[, c("bedrooms", "bathrooms", "sqft_living", "floors", "waterfront", "view",
"grade", "sqft_above", "sqft_living15", "lat", "condition",
"yr_renovated", "zipcode", "price")]
test4 <- test3
# Settings for the model
formula = price ~ .
fitControl <- trainControl(method = "cv", number = 5)
# Linear Regression to predict price based on the following variables
model1 <- train(formula,
data = train4,
method = "lm",
trControl = fitControl,
metric = "MAE") # what is this
# The model scores an R2 of 0.84
summary(model1)
# Now we fit the model to our dataset to predict the prices for every house
train4_fit <- fitted(model1)
train4$pred <- train4_fit
# We create a function for the mean absoulte percentage error
mape <- function(real, predicted) {
return(mean(abs((real - predicted) / real)))
}
# We score the MAPE on our actual and predicted values
mape(train4$price, train4$pred)
# Create new dataframes
train5 <- train3[, c("bedrooms", "bathrooms", "sqft_living", "floors", "waterfront", "view",
"grade", "sqft_above", "sqft_living15", "lat", "condition",
"yr_renovated", "zipcode", "price")]
test5 <- test3
# Transform into log prices
train5$price <- log(train5$price)
test5$price <- log(test5$price)
View(train5)
# Liner model
model3 <- train(formula,
data = train4,
method = "lm",
trControl = fitControl,
metric = "MAE")
# The model scores an R2 of 0.84
summary(model3)
# Now we fit the model to our dataset to predict the prices for every house
train5_fit <- fitted(model3)
train5$pred <- train5_fit
View(train5)
# Turn the log back into normal prices
train5$price <- exp(train5$price)
train5$pred <- exp(train5$pred)
View(train5)
# We create a function for the mean absoulte percentage error
mape <- function(real, predicted) {
return(mean(abs((real - predicted) / real)))
}
# We score the MAPE on our actual and predicted values
mape(train5$price, train4$pred)
# Create new dataframes
train5 <- train3[, c("bedrooms", "bathrooms", "sqft_living", "floors", "waterfront", "view",
"grade", "sqft_above", "sqft_living15", "lat", "condition",
"yr_renovated", "zipcode", "price")]
test5 <- test3
View(train5)
source('~/Desktop/TERM 3/house_prices/1. Preparation.R', echo=TRUE)
source('~/Desktop/TERM 3/house_prices/2. Correlation.R', echo=TRUE)
source('~/Desktop/TERM 3/house_prices/3. Graphs.R', echo=TRUE)
source('~/Desktop/TERM 3/house_prices/4. Data transformation.R', echo=TRUE)
# Create new dataframes
train5 <- train3[, c("bedrooms", "bathrooms", "sqft_living", "floors", "waterfront", "view",
"grade", "sqft_above", "sqft_living15", "lat", "condition",
"yr_renovated", "zipcode", "price")]
test5 <- test3
# Transform into log prices
train5$price <- log(train5$price)
test5$price <- log(test5$price)
# Liner model
model3 <- train(formula,
data = train4,
method = "lm",
trControl = fitControl,
metric = "MAE")
# Liner model
model3 <- train(formula,
data = train5,
method = "lm",
trControl = fitControl,
metric = "MAE")
View(train5)
rm(train5)
rm(test5)
# Create new dataframes
train6 <- train3[, c("bedrooms", "bathrooms", "sqft_living", "floors", "waterfront", "view",
"grade", "sqft_above", "sqft_living15", "lat", "condition",
"yr_renovated", "zipcode", "price")]
test6 <- test3
# Transform into log prices
train6$price <- log(train6$price)
test6$price <- log(test6$price)
# Liner model
model3 <- train(formula,
data = train6,
method = "lm",
trControl = fitControl,
metric = "MAE")
# Liner model
model3 <- caret::train(formula,
data = train6,
method = "lm",
trControl = fitControl,
metric = "MAE")
# Liner model
model3 <- train(formula,
data = train6,
method = "lm",
trControl = fitControl,
metric = "MAE")
View(train3)
View(train6)
# Create new dataframes
train6 <- train3[, c("bedrooms", "bathrooms", "sqft_living", "floors", "waterfront", "view",
"grade", "sqft_above", "sqft_living15", "lat", "condition",
"yr_renovated", "zipcode", "price")]
View(train6)
View(train3)
# Create new dataframes
train6 <- train3[, c("bedrooms", "bathrooms", "sqft_living", "floors", "waterfront", "view",
"grade", "sqft_above", "sqft_living15", "lat", "condition",
"yr_renovated", "zipcode", "price")]
test6 <- test3
# Transform into log prices
train6$price <- log(train6$price)
test6$price <- log(test6$price)
# Liner model
model3 <- train(formula,
data = train6,
method = "lm",
trControl = fitControl,
metric = "MAE")
