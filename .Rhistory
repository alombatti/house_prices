train2$logprice = log(train2$price)
print(subset(train2, train2$bedrooms > 10)) # We remove these values
# Boxplot between price and bathrooms
graph4 <- boxplot(train2[, "logprice"] ~ train2[, "bathrooms"],
main = "Price vs Bathrooms", col=c("#F1C40F","#336633"),
xlab="bathrooms", ylab="log (price)")
unique(train2$bathrooms)
print(subset(train2, train2$bathrooms = 7.5))
print(subset(train2, train2$bathrooms > 7.5))
print(subset(train2, train2$bathrooms > 7))
print(subset(test2, train2$bathrooms > 7.5))
# Last, we apply the changes to the dataset
train2 <- train2[-5419, ]
print(subset(train2, train2$bathrooms > 7))
# Creating a copy of the dataframe to apply EDA changes
complete2 <- complete
# Unstack train and test
train2 <- split(complete2, complete2$price > 0)
train2 <- train2[["TRUE"]]
test2 <- split(complete2, is.na(complete2$price))
test2 <- test2[["TRUE"]]
# Boxplot between price and waterfront
graph6 <- boxplot(train2[, "logprice"] ~ train2[, "waterfront"],
main = "Price vs Waterfront", col=c("#F1C40F","#336633"),
xlab="waterfront", ylab="log (price)")
# Creating a copy of the dataframe to apply EDA changes
complete2 <- complete
# Unstack train and test
train2 <- split(complete2, complete2$price > 0)
train2 <- train2[["TRUE"]]
test2 <- split(complete2, is.na(complete2$price))
test2 <- test2[["TRUE"]]
# I transform the price with the log to have better graphs
train2$logprice = log(train2$price)
# Boxplot between price and waterfront
graph6 <- boxplot(train2[, "logprice"] ~ train2[, "waterfront"],
main = "Price vs Waterfront", col=c("#F1C40F","#336633"),
xlab="waterfront", ylab="log (price)")
# Boxplot between price and condition
graph8 <- boxplot(train2[, "logprice"] ~ train2[, "condition"],
main = "Price vs Condition", col=c("#F1C40F","#336633"),
xlab="condition", ylab="log (price)")
# Boxplot between price and view
graph7 <- boxplot(train2[, "logprice"] ~ train2[, "view"],
main = "Price vs View", col=c("#F1C40F","#336633"),
xlab="view", ylab="log (price)")
# Boxplot between price and condition
graph8 <- boxplot(train2[, "logprice"] ~ train2[, "condition"],
main = "Price vs Condition", col=c("#F1C40F","#336633"),
xlab="condition", ylab="log (price)")
# Boxplot between price and grade
graph9 <- boxplot(train2[, "logprice"] ~ train2[, "grade"],
main = "Price vs Grade", col=c("#F1C40F","#336633"),
xlab="grade", ylab="log (price)")
# Boxplot between price and sqft_living
graph10 <- boxplot(train2[, "logprice"] ~ train2[, "sqft_living"],
main = "Price vs sqft_Living", col=c("#F1C40F","#336633"),
xlab="sqft_living", ylab="log (price)")
# Boxplot between price and sqft_living
graph10 <- plot(train2[, "logprice"] ~ train2[, "sqft_living"],
main = "Price vs sqft_Living", col=c("#F1C40F","#336633"),
xlab="sqft_living", ylab="log (price)")
# Boxplot between price and sqft_living
graph10 <- boxplot(train2[, "logprice"] ~ train2[, "sqft_living"],
main = "Price vs sqft_Living", col=c("#F1C40F","#336633"),
xlab="sqft_living", ylab="log (price)")
# Boxplot between price and sqft_living
graph10 <- boxplot(train2[, "logprice"] ~ train2[, "sqft_living"],
main = "Price vs sqft_Living", col=c("#F1C40F","#336633"),
xlab="sqft_living", ylab="log (price)")
# Boxplot between price and sqft_basement
graph11 <- boxplot(train2[, "logprice"] ~ train2[, "sqft_basement"],
main = "Price vs sqft_Basement", col=c("#F1C40F","#336633"),
xlab="sqft_basement", ylab="log (price)")
# Boxplot between price and yr_renovated
graph12 <- boxplot(train2[, "logprice"] ~ train2[, "yr_renovated"],
main = "Price vs yr_Renovated", col=c("#F1C40F","#336633"),
xlab="yr_renovated", ylab="log (price)")
# Boxplot between price and zipcode
graph13 <- boxplot(train2[, "logprice"] ~ train2[, "zipcode"],
main = "Price vs Zipcode", col=c("#F1C40F","#336633"),
xlab="zipcode", ylab="log (price)")
# Boxplot between price and sqft_living15
graph14 <- boxplot(train2[, "logprice"] ~ train2[, "sqft_living15"],
main = "Price vs sqft_Living(15)", col=c("#F1C40F","#336633"),
xlab="sqft_living(15)", ylab="log (price)")
source('~/Desktop/TERM 3/house_prices/1. Preparation.R', echo=TRUE)
source('~/Desktop/TERM 3/house_prices/2. Correlation.R', echo=TRUE)
source('~/Desktop/TERM 3/house_prices/3. Graphs.R', echo=TRUE)
source('~/Desktop/TERM 3/house_prices/4. Data transformation.R', echo=TRUE)
source('~/Desktop/TERM 3/house_prices/5. Model.R', echo=TRUE)
# The model scores an R2 of 0.84
summary(model1)
View(train3)
count(unique(train2$lat))
train2$lat
unique(train2$lat)
length(unique(train2$lat)
length(unique(train2$lat))
length(unique(train2$lat))
length(unique(train2[,"lat"]))
# Linear Regression to predict price based on the folloeing variables
model1 <- lm(formula = price ~ bedrooms +
bathrooms +
sqft_living +
floors +
waterfront +
view +
grade +
sqft_above +
sqft_living15 +
lat +
condition +
yr_renovated +
zipcode,
data = train3)
# The model scores an R2 of 0.84
summary(model1)
# Now we fit the model to our dataset to predict the prices for every house
train3_fit <- fitted(model1)
train3$pred <- train3_fit
# We create a function for the mean absoulte percentage error
mape <- function(real, predicted) {
return(mean(abs((real - predicted) / real)))
}
# We score the MAPE on our actual and predicted values
mape(train3$price, train3$pred)
complete$PriceBin<-cut(complete$price, 5)
center_lon = median(complete$long,na.rm = TRUE)
center_lat = median(complete$lat,na.rm = TRUE)
factpal <- colorFactor(c("black","blue","yellow","orange","#0B5345","red"),
complete$PriceBin)
leaflet(complete) %>% addProviderTiles("Esri.NatGeoWorldMap") %>%
addCircles(lng = ~long, lat = ~lat,
color = ~factpal(PriceBin))  %>%
# controls
setView(lng=center_lon, lat=center_lat,zoom = 12) %>%
addLegend("bottomright", pal = factpal, values = ~PriceBin,
title = "House Price Distribution",
opacity = 1)
?leaflet
??leaflet
library(leaflet)
complete$PriceBin<-cut(complete$price, 5)
center_lon = median(complete$long,na.rm = TRUE)
center_lat = median(complete$lat,na.rm = TRUE)
factpal <- colorFactor(c("black","blue","yellow","orange","#0B5345","red"),
complete$PriceBin)
leaflet(complete) %>% addProviderTiles("Esri.NatGeoWorldMap") %>%
addCircles(lng = ~long, lat = ~lat,
color = ~factpal(PriceBin))  %>%
# controls
setView(lng=center_lon, lat=center_lat,zoom = 12) %>%
addLegend("bottomright", pal = factpal, values = ~PriceBin,
title = "House Price Distribution",
opacity = 1)
complete$PriceBin<-cut(complete$price, c(0,250e3,500e3,750e3,1e6,2e6,999e6))
center_lon = median(complete$long,na.rm = TRUE)
center_lat = median(complete$lat,na.rm = TRUE)
factpal <- colorFactor(c("black","blue","yellow","orange","#0B5345","red"),
complete$PriceBin)
leaflet(complete) %>% addProviderTiles("Esri.NatGeoWorldMap") %>%
addCircles(lng = ~long, lat = ~lat,
color = ~factpal(PriceBin))  %>%
# controls
setView(lng=center_lon, lat=center_lat,zoom = 12) %>%
addLegend("bottomright", pal = factpal, values = ~PriceBin,
title = "House Price Distribution",
opacity = 1)
model3 <- train(
formula = price ~ bedrooms +
bathrooms +
sqft_living +
floors +
waterfront +
view +
grade +
sqft_above +
sqft_living15 +
lat +
condition +
yr_renovated +
zipcode,
data = train3,
method = "ranger", num.trees=1000,
preProc = NULL,
tuneGrid = tuneGrid,
trControl = ctrl,
metric = "MAE"
)
View(train3)
# To complete our analysis, we run the moden on a dataset with the selected variables
train4 <- train3[, c("bedrooms", "bathrooms", "sqft_living", "floors", "waterfront", "view",
"grade", "sqft_above", "sqft_living15", "lat", "condition",
"yr_renovated", "zipcode")]
# Settings for the model
formula = price ~ .
fitControl <- trainControl(method="cv",number = 5)
library(caret)
# Settings for the model
formula = price ~ .
fitControl <- trainControl(method="cv",number = 5)
KCHouseDataModel = train(formula, data = KCHouseData2,
method = "lm",trControl = fitControl,metric="RMSE")
# Linear Regression to predict price based on the folloeing variables
model1 <- train(formula,
data = train4,
method = "lm",
trControl = fitControl,
metric = "RMSE")
# Linear Regression to predict price based on the folloeing variables
model1 <- train(formula,
data = train4,
method = "lm",
trControl = fitControl,
metric = "RMSE")
# Settings for the model
formula = price ~
fitControl <- trainControl(method="cv",number = 5)
# Linear Regression to predict price based on the folloeing variables
model1 <- train(formula,
data = train4,
method = "lm",
trControl = fitControl,
metric = "RMSE")
# The model scores an R2 of 0.84
summary(model1)
# Settings for the model
formula = price ~
fitControl <- trainControl(method="cv",number = 5)
# Settings for the model
formula = price ~ .
fitControl <- trainControl(method="cv",number = 5)
# Linear Regression to predict price based on the folloeing variables
model1 <- train(formula,
data = train4,
method = "lm",
trControl = fitControl,
metric = "RMSE")
View(train4)
# To complete our analysis, we run the moden on a dataset with the selected variables
train4 <- train3[, c("bedrooms", "bathrooms", "sqft_living", "floors", "waterfront", "view",
"grade", "sqft_above", "sqft_living15", "lat", "condition",
"yr_renovated", "zipcode", "price")]
# Settings for the model
formula = price ~ .
fitControl <- trainControl(method="cv",number = 5)
# Linear Regression to predict price based on the folloeing variables
model1 <- train(formula,
data = train4,
method = "lm",
trControl = fitControl,
metric = "RMSE")
# The model scores an R2 of 0.84
summary(model1)
# The model scores an R2 of 0.84
summary(model1)
# Linear Regression to predict price based on the folloeing variables
model1 <- train(formula,
data = train4,
method = "ranger",
num.trees=50,
preProc = NULL,
tuneGrid = tuneGrid,
trControl = ctrl,
metric = "MAE")
ctrl <- trainControl(
method = "cv",
number = 10,
savePredictions=TRUE
)
# Linear Regression to predict price based on the folloeing variables
model1 <- train(formula,
data = train4,
method = "ranger",
num.trees=50,
preProc = NULL,
tuneGrid = tuneGrid,
trControl = ctrl,
metric = "MAE")
tuneGrid=data.table(expand.grid(mtry=c(5,15),
splitrule='variance',
min.node.size=c(2,5,10)))
library(data.table)
tuneGrid=data.table(expand.grid(mtry=c(5,15),
splitrule='variance',
min.node.size=c(2,5,10)))
# Linear Regression to predict price based on the folloeing variables
model1 <- train(formula,
data = train4,
method = "ranger",
num.trees=50,
preProc = NULL,
tuneGrid = tuneGrid,
trControl = ctrl,
metric = "MAE")
# The model scores an R2 of 0.84
summary(model1)
model1
# Linear Regression to predict price based on the folloeing variables
model1 <- train(formula,
data = train4,
method = "ranger",
num.trees=50,
preProc = NULL,
tuneGrid = tuneGrid,
trControl = ctrl,
metric = "MAPE")
# The model scores an R2 of 0.84
summary(model1)
model1
# To complete our analysis, we run the moden on a dataset with the selected variables
train4 <- train3[, c("bedrooms", "bathrooms", "sqft_living", "floors", "waterfront", "view",
"grade", "sqft_above", "sqft_living15", "lat", "condition",
"yr_renovated", "zipcode", "price")]
# Settings for the model
formula = price ~ .
# Linear Regression to predict price based on the folloeing variables
model1 <- lm(formula,
data = train3)
# The model scores an R2 of 0.84
summary(model1)
# Now we fit the model to our dataset to predict the prices for every house
train3_fit <- fitted(model1)
train3$pred <- train3_fit
# We create a function for the mean absoulte percentage error
mape <- function(real, predicted) {
return(mean(abs((real - predicted) / real)))
}
# We score the MAPE on our actual and predicted values
mape(train3$price, train3$pred)
# We predict the prices on the test dataset
test3$price <- predict(model1, test3)
# We predict the prices on the test dataset
test3$price <- predict(model1, test3)
# We predict the prices on the test dataset
test3$price <- predict(model1, test3)
# Linear Regression to predict price based on the folloeing variables
model1 <- train(formula,
data = train3,
method = "lm",
trControl = fitControl,
metric = "MAPE")
# The model scores an R2 of 0.84
summary(model1)
# Now we fit the model to our dataset to predict the prices for every house
train3_fit <- fitted(model1)
train3$pred <- train3_fit
# We create a function for the mean absoulte percentage error
mape <- function(real, predicted) {
return(mean(abs((real - predicted) / real)))
}
# We score the MAPE on our actual and predicted values
mape(train3$price, train3$pred)
# We predict the prices on the test dataset
test3$price <- predict(model1, test3)
# Linear Regression to predict price based on the folloeing variables
model1 <- train(formula,
data = train3,
method = "lm",
trControl = fitControl,
metric = "MAE")
# The model scores an R2 of 0.84
summary(model1)
# Now we fit the model to our dataset to predict the prices for every house
train3_fit <- fitted(model1)
train3$pred <- train3_fit
# We create a function for the mean absoulte percentage error
mape <- function(real, predicted) {
return(mean(abs((real - predicted) / real)))
}
# We score the MAPE on our actual and predicted values
mape(train3$price, train3$pred)
test4 <- test3
source('~/Desktop/TERM 3/house_prices/1. Preparation.R', echo=TRUE)
source('~/Desktop/TERM 3/house_prices/2. Correlation.R', echo=TRUE)
source('~/Desktop/TERM 3/house_prices/3. Graphs.R', echo=TRUE)
source('~/Desktop/TERM 3/house_prices/4. Data transformation.R', echo=TRUE)
source('~/Desktop/TERM 3/house_prices/5. Model.R', echo=TRUE)
source('~/Desktop/TERM 3/house_prices/1. Preparation.R', echo=TRUE)
source('~/Desktop/TERM 3/house_prices/1. Preparation.R', echo=TRUE)
source('~/Desktop/TERM 3/house_prices/2. Correlation.R', echo=TRUE)
source('~/Desktop/TERM 3/house_prices/3. Graphs.R', echo=TRUE)
source('~/Desktop/TERM 3/house_prices/4. Data transformation.R', echo=TRUE)
source('~/Desktop/TERM 3/house_prices/5. Model.R', echo=TRUE)
# Linear Regression to predict price based on the folloeing variables
model1 <- train(formula,
data = train4,
method = "lm",
trControl = fitControl,
metric = "MAE") # what is this
# The model scores an R2 of 0.84
summary(model1)
# Now we fit the model to our dataset to predict the prices for every house
train4_fit <- fitted(model1)
train4$pred <- train4_fit
# We create a function for the mean absoulte percentage error
mape <- function(real, predicted) {
return(mean(abs((real - predicted) / real)))
}
# We score the MAPE on our actual and predicted values
mape(train4$price, train4$pred)
# We predict the prices on the test dataset
test4$price <- predict(model1, test4)
View(test4)
test4 <- test3
View(test4)
# We predict the prices on the test dataset
test4$price <- predict(model1, test4)
View(test4)
# To complete our analysis, we run the moden on a dataset with the selected variables
train4 <- train3[, c("bedrooms", "bathrooms", "sqft_living", "floors", "waterfront", "view",
"grade", "sqft_above", "sqft_living15", "lat", "condition",
"yr_renovated", "zipcode", "price")]
test4 <- test3
# Settings for the model
formula = price ~ .
fitControl <- trainControl(method="cv",number = 5)
# Linear Regression to predict price based on the folloeing variables
model1 <- train(formula,
data = train4,
method = "lm",
trControl = fitControl,
metric = "MAE") # what is this
# The model scores an R2 of 0.84
summary(model1)
# Now we fit the model to our dataset to predict the prices for every house
train4_fit <- fitted(model1)
train4$pred <- train4_fit
View(train4)
# We create a function for the mean absoulte percentage error
mape <- function(real, predicted) {
return(mean(abs((real - predicted) / real)))
}
# We score the MAPE on our actual and predicted values
mape(train4$price, train4$pred)
View(test4)
# We predict the prices on the test dataset
test4$price <- predict(model1, test4)
View(test4)
source('~/Desktop/TERM 3/house_prices/5. Model.R', echo=TRUE)
mape(train4$price, train4$pred)
round(mape(train4$price, train4$pred), 2)
train <- read.csv("https://gist.githubusercontent.com/alombatti/f2cb8f1a244784999353309a97a6777f/raw/f38ee90641da97f62964ac10ea558564bfc6cb65/house_price_train.csv")
test <- read.csv("https://gist.githubusercontent.com/alombatti/1df87e336f159842e64ced9380b13e25/raw/49ea0fe6b42fb5d4868e1291dc8e47b20d2cc3bd/house_price_test.csv")
complete <- Stack(train, test)
complete$id = NULL
complete$date = NULL
***
complete2 <- select(complete, "price", "bedrooms", "bathrooms", "sqft_living", "floors",
"waterfront", "view", "grade", "sqft_above", "sqft_basement", "lat",
"sqft_living15", "condition", "yr_renovated", "zipcode")
***
train2 <- split(complete2, complete2$price > 0)
train2 <- train2[["TRUE"]]
test2 <- split(complete2, is.na(complete2$price))
test2 <- test2[["TRUE"]]
train2 <- train2[-5419, ] # Eliminate bathrooms = 7.5
train2 <- train2[train2$bedrooms <= 10, ] # Keeping bedrooms <10
train2$sqft_basement[train2$sqft_basement != 0] = 1 # Dummify basement
test2$sqft_basement[test2$sqft_basement != 0] = 1
train2$yr_renovated[train2$yr_renovated != 0] = 1 #Dummify yr_renovated
test2$yr_renovated[test2$yr_renovated != 0] = 1
complete2 <- Stack(train2, test2)
***
complete3 <- complete2
range01 <- function(x) {
(x-min(x)) / (max(x)-min(x))
}
complete3$sqft_living <- range01(complete3$sqft_living)
complete3$sqft_above <- range01(complete3$sqft_above)
complete3$sqft_living15 <- range01(complete3$sqft_living15)
complete3$bathrooms <- range01(complete2$bathrooms)
complete3$floors <- range01(complete2$floors)
complete3$grade <- range01(complete2$grade)
complete3$condition <- range01(complete3$condition)
complete3$bedrooms <- range01(complete3$bedrooms)
complete3$waterfront <- as.factor(complete2$waterfront)
complete3$view <- as.factor(complete2$view)
complete3$sqft_basement <- as.factor(complete3$sqft_basement)
complete3$yr_renovated <- as.factor(complete3$yr_renovated)
complete3$zipcode <- as.factor(complete3$zipcode)
breaks_lat <- c(-Inf, 47.20, 47.25, 47.30, 47.35, 47.40, 47.45, 47.50, 47.55, 47.60,
47.65, 47.70, 47.75, Inf)
names_lat <- c("47.15 - 47.20", "47.20 - 47.25", "47.25 - 47.30", "47.30 - 47.35",
"47.35 - 47.40", "47.40 - 47.45", "47.45 - 47.50", "47.50 - 47.55",
"47.55 - 47.60", "47.60 - 47.65", "47.65 - 47.70", "47.70 - 47.75",
"47.75 - 47.80")
complete3$lat <- cut(complete3$lat, breaks = breaks_lat, labels = names_lat)
train3 <- split(complete3, complete3$price > 0)
train3 <- train3[["TRUE"]]
test3 <- split(complete3, is.na(complete3$price))
test3 <- test3[["TRUE"]]
***
train4 <- train3[, c("bedrooms", "bathrooms", "sqft_living", "floors", "waterfront", "view",
"grade", "sqft_above", "sqft_living15", "lat", "condition",
"yr_renovated", "zipcode", "price")]
test4 <- test3
formula = price ~ .
fitControl <- trainControl(method="cv",number = 5)
model1 <- train(formula,
data = train4,
method = "lm",
trControl = fitControl,
metric = "MAE")
summary(model1)
train4_fit <- fitted(model1)
train4$pred <- train4_fit
mape <- function(real, predicted) {
return(mean(abs((real - predicted) / real)))
}
mape(train4$price, train4$pred)
